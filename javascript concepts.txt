                        JAVASCRIPT

    -dynamically typed language.
                              
                            VARIABLES
    1.let= 
    this keyword is used with variables that can be updated but they can't be repeated.
    like,
       let age=12;
         if i want to update it, i can do this,
        age=25;
        or
        age=age+3;

    2.const=
    this keyword is used with those variable that can't be repeated and updated.
    we use it like,
        const age=12;

    *we can't update it BUT, if it is used as object's key, then it can be updated.
    we can do that by creating object.
     const student={
          name:"hafsa";
          age:22;
          cgpa:3.4;
          degree:"BS-IT";
     };
     console.log(student["name"]); 
     //let's update
     student.name="sheraz";
     console.log(student);

    * You can use both dot(.) or bracket way of calling athe variable.

    *We dont need to declare the datatypes with each variable. Language is smart enough to figure out on its own.

    3.functions=
     Can be written by 3 methods.
         i- function greeet(){
            console.log('hi');
         };
         greet();

         ii- const greet=function(){
            console.log('hi');
         };
         greet();

         iii- const greet=()=> {  days.
            console.logg('hi');     
         };
         greet();
       
    4. conditionals=
             if 
             else if
             else
             ==     loose comparison(no data type restriction)
             ===    strict comparison(same datatypes only)
             !=     not equal (loose)
             !==    not equal(strict)
             >      greater than
             <      less than
             >=     greater than or equal to
             <=     less than or equal to

    5. logical operators=
            &&        true and true
            . or ||   OR
            !         NOT


   6. array:
           let array=[1,2,3,4,5];
           console.log(array[1]);      //output would be 2.

           Update:
           array[0]=0;
           console.log(array[0]);     //1 was replaced by 0.

           array length:
           console.log(array.length);

           add to end:
           array.push(6);
           console.log(array);       //array=[0,2,3,4,5,6]

           remove from end:
           array.pop();

           to check correct value:
           array.include(value);

           remove first element:
           array.shift();

           add value at start:
           array.unshift(value);

           splice:
           splice(startIndex, deleteCount,value)
                 has three methods.

                 -remove element:
                 let fruits=["apple","banana","mango];
                 fruits.splice(1,2);
                 console.log(fruits);     //output= fruits=["mango"]

                 -insert element:
                 let fruits=["apple","banana","mango"];
                 fruits.splice[1,0,"pear"];
                 concole.log(fruits);           //output=fruits=["apple","pear","banana","mango"]

                 -replace element:
                 let fruits=["apple","banana","mango"];
                 fruits.splice[0,1,"pear"];
                 concole.log(fruits);            //output=fruits=["apple","pear","mango"]

            slice:
            creates copy of array till desired length.
            let no=[1,2,3,4,5,6];
            let sliced=fruits.slice(1,4);
            console.log(sliced);          //output=[2,3,4,5]

            indexOf:
            array.indexOf(searchElement,fromIndex)
                 let no=[1,2,3,4,5,6];
                 console.log(no.indexOf(2));     //1
                           OR
                 console.log(no.indexOf(4,2));   //4
            
            concat:
            Combines two or more arrays.
            let arr1 = [1, 2];  
            let arr2 = [3, 4];  
            let combined = arr1.concat(arr2);  
            console.log(combined); // [1, 2, 3, 4]  

            reverse:
            Reverses the array in place.
            arr.reverse();  

            map:
            Creates a new array by applying a function to each element.
            let numbers = [1, 2, 3];  
            let doubled = numbers.map(n => n * 2);  
            console.log(doubled); // [2, 4, 6]  

            filter:
            Creates a new array with elements that pass the test.
            let numbers = [1, 2, 3, 4];  
            let evens = numbers.filter(n => n % 2 === 0);  
            console.log(evens); // [2, 4]  

            reduce:
            Reduces array to a single value by applying a function.
            let numbers = [1, 2, 3, 4];  
            let sum = numbers.reduce((total, n) => total + n, 0);  
            console.log(sum); // 10  

            find:
            returns first element that satisfies a condition.
            let firstEven = numbers.find(n => n % 2 === 0);  

            some:
            Checks if at least one element satisfies condition.
            let hasEven = numbers.some(n => n % 2 === 0);

            every:
            Checks if all elements satisfy condition.
            let allEven = numbers.every(n => n % 2 === 0); 

            forEach:
            array.forEach(function(currentVal,index,array)){
            ....
            }
               let no=[1,2,3,4,5];
               fruits.forEach(function(no,index)){
               console.log(index+";"+no);
               }

   7.Hoisting:
            JavaScriptâ€™s default behavior of moving variable and function declarations to the top of their scope before code execution.

   8.closures:
              These are the functions that remembers variables from their place they were created, even after that place is gone.
                function outer(){
                let name="hafsa";
                function inner(){
                console.log(name);
                }
                return inner;
                }
                const greet=outer;
               greet();
               They are useful for data privacy and encapsulation.

   9.Scope:
          Three types    //self explanatry
          -global
          -logical
          -block

   10.type ncoercion:
                    Auto conversion of different data types to same.

   11.type conversion:
                     Manual conversion of different data types to same.

   12.Template Literals:
                       -It is a way to create stings in JS that allow interpolatio and multi line strings easily.
                       -Instead of "" and '', we use `...`
                       -To embed expression, we use, &{expression}
      
                      const name="hafsa";
                      const age=22;
                      const greet="hello my name is &{name} and I am &{age} years old.
                      console.log(greet);

   13. string methods:
                  They are the built in functions.
                    1- .length                                   let str="Hello"; console.log(str.length); // 5

                    2-.slice(start,end)                         let str="Hello"; console.log(str.slice(1,4)); // ell

                    3-.subString(start,end)                     let str="Hello"; console.log(str.substring(1,4)); // ell

                    4-.substr(start,length)                     let str="Hello"; console.log(str.substr(1,3)); // ell

                    5-.replace(search,replace)                  let str="Hello"; console.log(str.replace("He","Ye")); // Yello

                    6-.toUpperCase                              let str="Hello"; console.log(str.toUpperCase()); // HELLO

                    7-.toLowerCase                              let str="Hello"; console.log(str.toLowerCase()); // hello

                    8-.includes(substring)                      let str="Hello"; console.log(str.includes("ell")); // true

                    9- .indexOf(substring)                       let str="Hello"; console.log(str.indexOf("l")); // 2

                    10-.startsWith(substring)                    let str="Hello"; console.log(str.startsWith("He")); // true

                    11-.endsWith(substring)                      let str="Hello"; console.log(str.endsWith("lo")); // true

                    12-.trim()                                   let str="  Hello  "; console.log(str.trim()); // Hello

   14.Math Methods:
                  These are built in functions for math problems.

                  1-Math.round(num)            console.log(Math.round(4.6)); // 5

                  2-Math.floor(num)            console.log(Math.floor(4.9)); // 4

                  3-Math.ceil(num)             console.log(Math.ceil(4.1)); // 5

                  4-Math.random()              console.log(Math.random()); // e.g., 0.482
                  
                  5-Math.max(a,b,...)          console.log(Math.max(3,7,2)); // 7

                  6-Math.min(a,b...)           console.log(Math.min(3,7,2)); // 2

                  7-Math.pow(base,exponent)    console.log(Math.pow(2,3)); // 8

                  8-Math.sqrt(num)             console.log(Math.sqrt(16)); // 4


   15.CallBack functions:
                        These are the functions that are passed into another function, which is then invoked inside the outer function to complete some kind of routine or action.

                        function greetUser(name, callback) {
                        console.log("Hello, " + name);
                        callback(); // calling the callback
                        }
                        // Callback function
                        function sayGoodbye() {
                        console.log("Goodbye!");
                        }
                        // Using the callback
                        greetUser("Alice", sayGoodbye);
                        // Output:
                        // Hello, Alice
                        // Goodbye!

   16.objects:
             Collection of key-value pairs used to store related data.
             const student = { 
               name: "Hafsa",
               age: 22,
               degree: "BS-IT",
               };
   
   17.object destruncting:
            A syntax to extract properties from an object into distinct variables.
            const student = { name: "Hafsa", age: 22 };
            const { name, age } = student;
            console.log(name); // Hafsa

   18.promise:
           An object representing the eventual completion (or failure) of an asynchronous operation.


           fetch('https://jsonplaceholder.typicode.com/posts/1')  // Request data from API
           .then(response => {                                   // Wait for response
           if (!response.ok) {                                 // Check if response is okay
           throw new Error('Network response was not ok'); // Throw error if not
           }
           return response.json();                             // Parse JSON from response
           })
           .then(data => {                                      // Handle the parsed data
           console.log('Post Title:', data.title);
           })
           .catch(error => {                                    // Catch any errors
           console.error('Fetch error:', error);
           });

   19. Async/await:
           Syntax to write asynchronous code that looks and behaves like synchronous code, making it easier to read and write.
           
           async function getPost() {
           try {
           const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
           if (!response.ok) throw new Error('Network error');
           const data = await response.json();
           console.log('Post Title:', data.title);
           } catch (error) {
           console.error('Error:', error);
           }
           }
           getPost();
 
   20. break and continue:
           -break immediately exits the current loop, stopping further iterations.
            for (let i = 0; i < 10; i++) {
            if (i === 5) {
            break; // exit the loop completely when i equals 5
            }
            console.log(i);              //output=1,2,3,4
            }

            -continue skips the current iteration and jumps to the next one in the loop.
             for (let i = 0; i < 5; i++) {
             if (i === 2) {
             continue; // skip the rest of this loop iteration when i equals 2
             }
             console.log(i);
             }                       //output=1,3,4

   21.
   22.waba lubba dub 

   
         




